/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HRM_R: HRM_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <(-1)>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <41 40 39 38 37 36 29 28 27 26 24 25 12 13 14 15 17 16 5 4 3 2 0 1>;
        };

        HRM_L: HRM_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <(-1)>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <41 40 39 38 37 36 6 18 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };
    };

    combos {
        compatible = "zmk,combos";

        capslock-combo {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 10>;
            layers = <0>;
        };

        escape-combo {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        enter-combo {
            bindings = <&kp ENTER>;
            key-positions = <31 32>;
        };

        tab-combo {
            bindings = <&kp TAB>;
            key-positions = <31 33>;
        };

        soft-off-combo {
            bindings = <&soft_off>;
            key-positions = <0 11>;
            layers = <3>;
        };

        bt-clear-all-combo {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <24 35>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q  &kp W                  &kp E                  &kp R              &kp T                                  &kp Y                   &kp U               &kp I                   &kp O                   &kp P          &kp LEFT_BRACKET
&trans  &kp A  &HRM_L LEFT_COMMAND S  &HRM_L LEFT_CONTROL D  &HRM_L LEFT_ALT F  &kp G                                  &kp H                   &HRM_R RIGHT_ALT J  &HRM_R RIGHT_CONTROL K  &HRM_R RIGHT_COMMAND L  &kp SEMICOLON  &kp SQT
&trans  &kp Z  &kp X                  &kp C                  &kp V              &kp B                                  &kp N                   &kp M               &kp COMMA               &kp DOT                 &kp FSLH       &kp RIGHT_BRACKET
                                      &kp LEFT_SHIFT         &lt 1 TILDE        &HRM_L LA(LC(LG(LEFT_SHIFT))) SPACE    &HRM_R TILDE BACKSPACE  &lt 2 TILDE         &kp ENTER
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &trans    &trans         &trans       &trans     &trans  &trans
&trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans    &kp PAGE_DOWN  &kp PAGE_UP  &trans     &trans  &trans
                                    &trans        &trans        &trans          &trans    &trans         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp GRAVE        &kp UNDERSCORE  &kp CARET     &kp DOLLAR     &kp PERCENT    &kp TILDE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans  &trans
&trans  &kp EXCLAMATION  &kp MINUS       &kp PLUS      &kp EQUAL      &kp HASH       &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans
&trans  &trans           &kp SLASH       &kp ASTERISK  &kp BACKSLASH  &kp AT         &kp PIPE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans  &trans  &trans
                                         &trans        &trans         &trans         &trans         &trans                &trans
            >;
        };

        system_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        conditional_system_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
